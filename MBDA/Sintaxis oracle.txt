SQL ESTANDAR

Tipo                   --->  CREATE DOMAIN.....AS....CONSTRAINT CHECK....
Atributo y Tupla       --->  ALTER TABLE.....ADD CONSTRAINT.....CHECK.....
Tabla y base de datos  --->  CREATE ASSERTION.........CHECK......
Acciones               --->  CONSTRAINT.......FOREIGN KEY.......REFERENCES....
			     [ON DELETE (RESTRICT | CASCADE | SET NULL)]
			     [ON UPDATE (RESTRICT | CASCADE | SET NULL)]
Disparadores           --->  CREATE TRIGGER nombre
			     [BEFORE|AFTER|INSTEAD OF]
			     [DELETE|INSERT|UPDATE[OF nombre columnas]]
			     ON nombre Tabla
			     [FOR EACH ROW[WHEN (condition)]]
			     DECLARE
			     --- Definición de variables

			     BEGIN
			     --- Instrucciones del disparador
			     END nombre;
			     La 3ra linea puede incluirse mas de una acción mediante un OR

/*ORACLE*/
-----------------------
CREATE TABLES
-----------------------
CREATE TABLE NOMBRE_TABLA( 
	ATRIBUTO TIPO ( RANGO ) NULIDAD,
	ATRIBUTO TIPO ( RANGO ) NULIDAD
);

XTABLA
---------------
DROP TABLE nombre_tabla;

XPOBLAR
---------------
DELETE FROM nombre_tabla;

IMPORTAR
---------------
SELECT * FROM base_de_datos.nombre_tabla;

INSERT INTO perfiles(correo,nombre,bloqueado)
SELECT correo,nombre,bloqueado FROM MBDAA01.PERFIL;
GRANT EXECUTE ON PA_ACTORES TO bd2128526;


PK's
-------------
ALTER TABLE NOMBRE_TABLA ADD CONSTRAINT PK_NOMBRE_TABLA PRIMARY KEY ( ATRIBUTOS );

FK's
-------------
ALTER TABLE NOMBRE_TABLA ADD CONSTRAINT FK_NOMBRE_TABLAS FOREIGN KEY ( ATRIBUTO ) REFERENCES TABLA_PRIMARIA ( ATRIBUTO );

UK's
-------------
ALTER TABLE NOMBRE_TABLA ADD CONSTRAINT UK_NOMBRE_TABLA_ATRIBUTO UNIQUE ( ATRIBUTO );

ATRIBUTOS
-------------

ALTER TABLE NOMBRE_TABLA MODIFY ( ATRIBUTO CHECK (CONDICION DEL ATRIBUTO ));

-------------------------
INTEGRIDAD DECLARATIVA
-------------------------
  * DOMINIO (DE TIPO)
	
	CREATE DOMAIN TNOMBRE AS TIPO ( RANGO ) CONSTRAINT CHECK ( VALUE CONDITION );

  * TUPLA (DE ATRIBUTO DE TUPLA)

	ALTER TABLE NOMBRE_TABLA ADD CONSTRAINT CK_NOMBRE_TABLA CHECK ( CONDICION );

  * ASERCION GENERAL (DE TABLA DE BASE DE DATOS)
	
	CREATE ASSERTION NOMBRE CHECK (NOT EXISTS ( CONSULTA ));

INSERT
-----------
  * INSERT INTO NOMBRE_TABLA ( ATRIBUTOS ) VALUES (ATRIBUTOS ,... ,..) ;

UPDATE
-----------
  * UPDATE NOMBRE_TABLA SET ATRIBUTO = POR LO QUE CAMBIO WHERE ATRIBUTO = EL QUE QUIERO CAMBIAR ;

DELETE
-----------
  * DELETE FROM NOMBRE_TABLA WHERE CONDICION ;


ERROR , DECLARE , CURSOR
----------------------------

RAISE_APPLICATION_ERROR ( NUMERO [ -20001 , -20999], MENSAJE );

SELECT ATRIBUTO INTO VARIABLE FROM NOMBRE_TABLA
WHERE CONDICION ;

CURSOR DATOS IS SELECT ESTADO , CIUDAD FROM
VENDEDORES WHERE ESTADO > 10;

ACCIONES DE REFERENCIA
----------------------------
CONSTRAINT FK_NOMBRE FOREIGN KEY NOMBRE_ATRIBUTO REFERENCES NOMBRE_TABLA ( NOMBRE_ATRIBUTO )
[ON DELETE ( RESTRICT , CASCADE , SET NULL ,NO ACTION)]
[ON UPDATE ( RESTRICT , CASCADE , SET NULL , NO ACTION )]

ALTER TABLE NOMBRE_TABLA DROP CONSTRAINT FK_TABLAS;
ALTER TABLE NOMBRE_TABLA ADDD CONSTRAINT FK_TABLAS
FOREIGN KEY (ATRIBUTO DE NOMBRE_TABLA) REFERENCES NOMBRE_TABLA_REFERENCIA (ATRIBUTOS) ON DELETE CASCADE;

DISPARADORES
----------------------------
CREATE OR REPLACE TRIGGER NOMBRE
[ BEFORE | AFTER | INSTEAD OF]
[ DELETE , INSERT , UPADTE [OF NOMBRE_COLUMNA ]]
ON NOMBRE_TABLA
[ FOR EACH ROW [ WHEN ( CONDICION )]]
DECLARE
NOMBRE_VARIABLE TIPO ;
  BEGIN
	SELECT ATRIBUTO INTO NOMBRE_VARIABLE FROM TABLA;
	IF ( CONDICION ) THEN
	QUE HACE
  END IF;
END NOMBRE ;

 := <ASIGNAR >
 : NEW . :OLD.

ELIMINAR TODO
------------------------
BEGIN
  FOR i IN ( SELECT ut. table_name
    FROM USER_TABLES ut) LOOP
  EXECUTE IMMEDIATE 'drop table '|| i.
    table_name || ' CASCADE CONSTRAINTS ';
  END LOOP ;
END ;

ELIMINAR TABLAS
------------------------
ALTER TABLE NOMBRE_TABLA DROP CONSTRAINT NOMBRE_CONSTRAINT ;
DROP TABLE NOMBRE_TABLA ;

CONCAT ( STRING1 , STRING2 );

SELECT *
FROM TABLA
WHERE CONDICION
GROUP BY
HAVING FUNCIONES (MAX ,MIN ,COUNT , AVG )
ORDER BY;

 REPLACE ("MAMA -",'-','/'); = MAMA /
 SUBSTR ( CADENA , INICIA , LONGITUD );

CONTIENE DOS PALABRAS MINIMO :
ALTER TABLE NOMBRE ADD CONSTRAINT CK_NOMBRE_TABLA CHECK ( REGEXP_LIKE ( LTRIM ( M_NAME ),'\S\s\S'));

Fechas
TO_DATE ('1999/03/12 ','YYYY /MM/DD ');
SELECT SYSDATE FROM DUAL ;


VISTAS
------------------------
CREATE VIEW NOMBRE_VISTA AS (CONSULTA) ;

SECUENCIAS
----------------------
declare
l_new_seq INTEGER ;
begin
  select count (*) + 1
    into l_new_seq
  from grupos ;
  execute immediate 'Create sequence seq_grupos
  start with ' || l_new_seq||' increment by 1';
end ;

CREATE SEQUENCE nombre_secuencia START WITH 1 INCREMENT BY 1;
CREATE OR REPLACE TRIGGER TG_nombre
BEFORE INSERT ON nombre tabla
FOR EACH ROW
DECLARE
F DATE;
BEGIN
    :new.numero := nombre_secuencia.nextval;
    F := TO_DATE(SYSDATE,'YYYY-MM-DD');
    :new.fecha := F;
END TG_nombre;
/


CRUD_E
----------------------
CREATE OR REPLACE PACKAGE PC_GRUPO IS
/* GRUPO */
  PROCEDURE AD_GRUPO ( xNOMBRE IN VARCHAR , xCREADOR IN VARCHAR );
  PROCEDURE MOD_GRUPO ( xID_GRUPO IN NUMBER , xNOMBRE IN VARCHAR );
  PROCEDURE EL_PERTENECE ( xID_USUARIO IN VARCHAR , xID_GRUPO IN NUMBER );
  FUNCTION CO_GRUPO RETURN SYS_REFCURSOR ;
  FUNCTION CO_EQUI ( xNOMBRE IN VARCHAR ) RETURN SYS_REFCURSOR ;
END PC_GRUPO ;

CRUD_I
------------------------
CREATE OR REPLACE PACKAGE BODY PC_GRUPO IS
  PROCEDURE AD_GRUPO ( xNOMBRE IN VARCHAR , xCREADOR IN VARCHAR ) IS
  BEGIN
	INSERT INTO GRUPOS ( ID_GRUPO , NOMBRE , CREADOR )
        VALUES ( SEQ_GRUPOS . NEXTVAL , xNOMBRE , xCREADOR );
	COMMIT ;
  EXCEPTION
	WHEN OTHERS THEN
 		ROLLBACK ;
		RAISE_APPLICATION_ERROR ( -20032 , 'No se puede insertar en grupos .');
  END ;

  PROCEDURE MOD_GRUPO ( xID_GRUPO IN NUMBER , xNOMBRE IN VARCHAR ) IS
	BEGIN
 		UPDATE GRUPOS SET NOMBRE = xNOMBRE WHERE ID_GRUPO = xID_GRUPO ;	
		COMMIT ;
 	EXCEPTION
		WHEN OTHERS THEN
 			ROLLBACK ;
			RAISE_APPLICATION_ERROR ( -20021 , 'No se puede modificar el grupo .');
  END ;

  PROCEDURE EL_PERTENECE ( xID_USUARIO IN VARCHAR , xID_GRUPO IN NUMBER ) IS
  	BEGIN
 		DELETE FROM PERTENECE_GRUPO WHERE ID_GRUPO = xID_GRUPO AND ID_USUARIO = xID_USUARIO ;
 		COMMIT ;
	EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK ;
				RAISE_APPLICATION_ERROR ( -20013 , 'No se puede eliminar este usuario .');
  END ;

  FUNCTION CO_GRUPO RETURN SYS_REFCURSOR IS CON_GRUPO SYS_REFCURSOR ;
	BEGIN
 	   OPEN CON_GRUPO FOR
	   SELECT DISTINCT USERNAME ,U. NOMBRE , ID_GRUPO , G. NOMBRE FROM USUARIOS U, GRUPOS G
	   WHERE G. CREADOR = USERNAME ;
	RETURN CON_GRUPO ;
  END ;

END PC_GRUPO ;

XCRUD
---------------------------
DROP PACKAGE BODY PC_NOMBRE;
DROP PACKAGE PC_NOMBRE;

ACTORES_E
----------------------------
CREATE OR REPLACE PACKAGE PA_USUARIO IS
 /* COMENTARIOS */
   PROCEDURE AD_COMEN ( xID_COMENTARIO IN NUMBER , xEXPLICACION IN VARCHAR , xFECHA IN DATE , xGRUPO IN NUMBER , xUSUARIO IN VARCHAR , xPROBLEMA IN NUMBER , xID_COMENTARIO_RESPUESTA IN NUMBER );
   
   FUNCTION CO_COMEN RETURN SYS_REFCURSOR ;
END PA_USUARIO ;

ACTORES_I
----------------------------
CREATE OR REPLACE PACKAGE BODY PA_USUARIO IS
   PROCEDURE AD_COMEN ( xID_COMENTARIO IN NUMBER , xEXPLICACION IN VARCHAR , xFECHA IN DATE , xGRUPO IN NUMBER , xUSUARIO IN VARCHAR , xPROBLEMA IN NUMBER , xID_COMENTARIO_RESPUESTA IN NUMBER ) IS
   BEGIN
	PC_COMENTARIOS . AD_COMENTARIOS (xID_COMENTARIO , xEXPLICACION , xFECHA , xGRUPO ,
	xUSUARIO , xPROBLEMA , xID_COMENTARIO_RESPUESTA );
	COMMIT ;
   EXCEPTION
	WHEN OTHERS THEN
 		ROLLBACK ;
		   RAISE_APPLICATION_ERROR ( -20032 , 'No se puede insertar en comentarios .');
  END ;

  FUNCTION CO_COMEN RETURN SYS_REFCURSOR IS CO_CO SYS_REFCURSOR ;
    BEGIN
       CO_CO := PC_PACKAGE.CO_CONSULTA_DE_ACTORESE ;
    RETURN CO_CO ;
  END ;
END PA_USUARIO ;


SEGURIDAD
----------------------------
EXECUTE PA_USUARIO . AD_COMEN (300 , 'Requiero ayuda en el problema 853 ',TO_DATE ('2007/07/09 ', '
yyyy /mm/dd ') ,1,'srd98 ' ,853, null );

SELECT PA_USUARIO.CO_CONSULTA_DE_ACTORESE FROM DUAL ;

CREATE ROLE USUARIO ;
GRANT PERFILE TO bd2158119;
GRANT EXECUTE ON PA_actores TO PERFILE;


CREATE ROLE USUARIO ;
DROP ROLE USUARIO ;

GRANT EXECUTE ON PA_USUARIO TO USUARIO ;
REVOKE EXECUTE ON PA_USUARIO FROM USUARIO ;

ALTER TABLE perfil MODIFY(correo CHECK(correo LIKE '%@%' AND correo NOT LIKE '%@' AND correo NOT LIKE '@%' AND correo NOT LIKE '%@%@%'));

ALTER TABLE adjetivo MODIFY(nombre CHECK (REGEXP_LIKE(nombre,'^[A-Za-z]+$')));

TRANSACCIONES
----------------------------
CREATE OR REPLACE
  PROCEDURE TRANSFERENCIA ( ORIGEN IN CHAR , DESTINO IN CHAR , VALOR IN NUMBER) IS
    BEGIN
      UPDATE CUENTAS SER SALDO = SALDO + VALOR WHERE NUMERO = DESTINO ;
      IF ( SOL % ROWCOUNT = 0) THEN
          RAISE_APPLICATION_ERROR ( -20001 , 'NO EXISTE CUENTA ');
      END IF;
      COMMIT ;
    EXCEPTION
	WHEN OTHERS THEN
 	    ROLLBACK ;
 		RAISE_APPLICATION_ERROR ( -20999 , SQLERRM );
END ;

XPATH
------------------------------
/Course_Catalog / Department / Chair [ not ( Professor /Last_Name / text () = parent ::*/ Course /Instructors / Professor / Last_Name / text ())]/Professor / Last_Name / text ()

/Course_Catalog / Department / Course / Instructors [count (*)= min (/ Course_Catalog / Department /
Course / Instructors / count (*) )]/ parent :: Course /@Numbe

EN SQL
---------------
SELECT A. INCIDENTE ,T. concecuencia
FROM ACCIDENTES A, XMLTABLE ('/ Tdetalle /Consecuencias / Consecuencia '
	passing A. detalle
	columns concecuencia VARCHAR (200) PATH 'text () ') T;


SELECT CASE
WHEN condicion THEN accion cuando cumple el when END ;
FROM name_table

CREATE ASSERTION
------------------------------------
CHECK ( NOT EXISTS ( SELECT * FROM ENVIOS
			GROUP BY VENDEDOR HAVING COUNT (*) > 100) )

ALTER TABLE USUARIOS MODIFY ( ESTADO CHECK (ESTADO LIKE 'Pasivo ' OR ESTADO LIKE 'Activo '));

FUNCTION CO_MUSICO RETURN XMLTYPE ;
FUNCTION CO_MUSICO RETURN XMLTYPE IS CO_XML XMLTYPE ;
BEGIN
   CO_XML := dbms_xmlgen . getxmltype ('SELECT * FROM MUSICIAN ');
					RETURN CO_XML ;
END ;

--El producto no puede tener mas de 5 videos asociados
CREATE OR REPLACE TRIGGER chk_videos_producto
AFTER INSERT ON Videos
DECLARE
    videos NUMBER;
BEGIN
    BEGIN
        SELECT 
            COUNT(*) INTO videos
        FROM Productos P
        
        INNER JOIN Informaciones I
        ON I.producto = P.mnemonico
        
        INNER JOIN Videos V
        ON V.codigo = I.codigo
        
        GROUP BY P.mnemonico
        HAVING count(*) > 5;
    EXCEPTION
        WHEN no_data_found THEN
            videos := 0;
    END;
    
    IF videos > 5 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Un producto no puede tener mas de 5 videos');
    END IF;
END;

DTD
---------------------------------

 <!DOCTYPE TDetalle [
	<!ELEMENT TDetalle (momentos,sugerencias*)>
	
	<!ELEMENT momentos ((m_positivo | m_error | m_negativo)*)>
	<!ATTLIST momentos numero CDATA #REQUIRED>
	
	<!ELEMENT m_positivo (descripcion)>
	<!ATTLIST m_positivo minuto CDATA #REQUIRED>
	<!ELEMENT descripcion (#PCDATA)>
	
	<!ELEMENT m_negativo (descripcion, solucion?)>
    <!ATTLIST m_negativo minuto CDATA #REQUIRED
                         prioridad CDATA #IMPLIED>
    <!ELEMENT descripcion (#PCDATA)>
    <!ATTLIST solucion asesor CDATA #REQUIRED>
    <!ELEMENT solucion (#PCDATA)>
	
	<!ELEMENT m_error (descripcion, solucion?)>
    <!ATTLIST m_error minuto CDATA #REQUIRED
                      prioridad CDATA #IMPLIED>
    <!ELEMENT descripcion (#PCDATA)>
    <!ATTLIST solucion asesor CDATA #REQUIRED>
    <!ELEMENT solucion (#PCDATA)>

    <!ELEMENT sugerencias (#PCDATA)>
]>

XML
---------------------------------
<TDetalle>
	<momentos numero="100">
		<m_positivo minuto="12">
			<descripcion>Fue muy util. El contenido es correcto.</descripcion>
		</m_positivo>
    	<m_negativo minuto="6">
			<descripcion>Pesimo audio</descripcion>
            <solucion asesor= "Andres">Cambiar formato</solucion>
		</m_negativo>
        <m_negativo minuto="32">
			<descripcion>Pesimo audio</descripcion>
            <solucion asesor= "Andres">Grabar nuevamente</solucion>
		</m_negativo>
		<m_error minuto="16" prioridad= "Media">
			<descripcion>Demasiado lento.</descripcion>
            <solucion asesor= "Andres">Revisar conexion del pc donde se esta reproduciendo el video</solucion>
		</m_error>
	</momentos>
    <sugerencias>Mejorar el audio</sugerencias>
    <sugerencias>Cambiar calidad del video</sugerencias>
</TDetalle>